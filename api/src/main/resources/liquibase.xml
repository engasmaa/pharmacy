<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">
	<!-- See http://www.liquibase.org/manual/home#available_database_refactorings 
		for a list of supported elements and attributes -->

	<changeSet id="icchange.pharmacy-v1.0.1" author="sLuchianov">
	
		<sql>
			INSERT INTO openmrs.order_type (name, description, creator, date_created, retired, uuid)
				SELECT * FROM (SELECT 'Pharmacy Order', 'Order type for dispensing on ICChange pharmacy module', '1', '2014-08-14 00:00:00', '0', UUID()) AS tmp
				WHERE NOT EXISTS ( SELECT name FROM openmrs.order_type WHERE name = 'Pharmacy Order' ) LIMIT 1;						
		</sql>

		<createTable tableName="pharmacy_drugorderstatus">
			<column name="order_id" type="int">
				<constraints nullable="false" references="openmrs.drug_order(order_id)" foreignKeyName="pharmacy_drugorderstatus_drugorder_fk" />
			</column>
			<column name="status" type="int"></column>
			<column name="uuid" type="char(38)"><constraints nullable="false" unique="true" /></column>	
		</createTable>
		
		

		<createTable tableName="pharmacy_pharmacyorder">            
			<column name="order_id" type="int" defaultValueNumeric="0">
                <constraints nullable="false" primaryKey="true"/>
            </column>
			<column name="drugorder_id" type="int"><constraints nullable="false" /></column>
		</createTable>
		
		<addForeignKeyConstraint 
			constraintName="pharmacyorder_extends_order_fk" 
			baseTableName="pharmacy_pharmacyorder" baseColumnNames="order_id"
			referencedTableName="orders" referencedColumnNames="order_id"
			deferrable="false" initiallyDeferred="false" />
		
		
		<addForeignKeyConstraint 
			constraintName="pharmacyorder_drugorder_fk"
			baseTableName="pharmacy_pharmacyorder" baseColumnNames="drugorder_id" 
			referencedTableName="drug_order" referencedColumnNames="order_id" 
			deferrable="false" initiallyDeferred="false" />

		<createTable tableName="pharmacy_pharmacyitem">
			<column name="pharmacyitem_id" autoIncrement="true" type="int"><constraints nullable="false" primaryKey="true" /></column>
			<column name="order_id" type="int"><constraints nullable="false" /></column>
			<column name="item_id" type="int"><constraints nullable="false" /></column>
			<column name="quanity" type="int"></column>
			<column name="unit" type="varchar(255)"></column>
			<column name="creator" type="int"><constraints nullable="false"/></column>
			<column name="date_created" type="datetime"><constraints nullable="false"/></column>
			<column name="changed_by" type="int"/>
			<column name="date_changed" type="datetime" />
			<column name="voided" type="boolean" defaultValueBoolean="false"><constraints nullable="false"/></column>
			<column name="voided_by" type="int" />
			<column name="retired" type="boolean" defaultValueBoolean="false"><constraints nullable="false"/></column>
			<column name="retired_by" type="int" />			
			<column name="date_voided" type="datetime" />
			<column name="void_reason" type="varchar(255)" defaultValue="null"/>
			<column name="uuid" type="char(38)"><constraints nullable="false" unique="true" /></column>			
		</createTable>
			
		<addForeignKeyConstraint 
			constraintName="pharmacyitem_pharmacyorder_fk"
			baseTableName="pharmacy_pharmacyitem" baseColumnNames="order_id" 
			referencedTableName="pharmacy_pharmacyorder" referencedColumnNames="order_id" 
			deferrable="false" initiallyDeferred="false" />

		<addForeignKeyConstraint 
			constraintName="pharmacyitem_creator_fk"
			baseTableName="pharmacy_pharmacyitem" baseColumnNames="creator"
			referencedTableName="users" referencedColumnNames="user_id"
			deferrable="false" initiallyDeferred="false" />
		
		<addForeignKeyConstraint
			constraintName="pharmacyitem_changed_by_fk"
			baseTableName="pharmacy_pharmacyitem" baseColumnNames="changed_by"
			referencedTableName="users" referencedColumnNames="user_id"
			deferrable="false" initiallyDeferred="false" />
			
		<addForeignKeyConstraint 
			constraintName="pharmacyitem_voided_by_fk"
			baseTableName="pharmacy_pharmacyitem" baseColumnNames="voided_by"
			referencedTableName="users" referencedColumnNames="user_id"
			deferrable="false" initiallyDeferred="false" />
		
		<addForeignKeyConstraint 
			constraintName="pharmacyitem_retired_by_fk"
			baseTableName="pharmacy_pharmacyitem" baseColumnNames="retired_by"
			referencedTableName="users" referencedColumnNames="user_id"
			deferrable="false" initiallyDeferred="false" />

	</changeSet>
	<changeSet id="icchange.pharmacy-v1.0.2" author="sLuchianov">
	<preConditions onFail="MARK_RAN">
	<tableExists tableName="pharmacy_drugorderstatus"/>
	</preConditions>
		<addColumn tableName="pharmacy_drugorderstatus">
			<column name="note_to_pharmacist" type="varchar(255)"></column>
		</addColumn>
	</changeSet>
	<changeSet id="icchange.pharmacy-v1.0.3" author="sLuchianov">
	<preConditions onFail="MARK_RAN">
	<tableExists tableName="pharmacy_drugorderstatus"/>
	</preConditions>
		<comment>This code populates null 1-to-1 drug order statuses</comment>
		<sql>
			insert into pharmacy_drugorderstatus
			select o.order_id, 4, o.uuid, ''
			from orders o left join pharmacy_drugorderstatus pdos
			on o.order_id = pdos.order_id
			where pdos.status is null;
		</sql>
	</changeSet>
	<changeSet id="icchange.pharmacy-v1.0.4" author="sLuchianov">
	<preConditions onFail="MARK_RAN">
	<foreignKeyConstraintExists foreignKeyName="pharmacy_drugorderstatus_drugorder_fk"/>
	</preConditions>
		<comment>This code drops foreign key constraint as data integrity will be ensured via triggers</comment>
		 <dropForeignKeyConstraint baseTableName="pharmacy_drugorderstatus" constraintName="pharmacy_drugorderstatus_drugorder_fk"/>
	</changeSet>	
	<changeSet id="icchange.pharmacy-v1.0.5" author="sLuchianov">
	<preConditions onFail="MARK_RAN">
		<not>
			<tableExists tableName="pharmacy_pharmacyorders"/>
		</not>
	</preConditions>
		<comment>
			This code creates a proper pharmacy orders table
		</comment>
		<sql>		
			CREATE TABLE `pharmacy_pharmacyorders` (
			  `pharmacyorder_id` int(11) NOT NULL AUTO_INCREMENT,
			  `drugorder_id` int(11) NOT NULL DEFAULT '0',
			  `item_id` int(11) NOT NULL,
			  `quantity` int(11) DEFAULT NULL,
			  `units` varchar(255) DEFAULT NULL,
			  `dispense_date` datetime NOT NULL,
			  `notes` varchar(255) DEFAULT NULL,
			  `creator` int(11) NOT NULL,
			  `date_created` datetime NOT NULL,
			  `changed_by` int(11) DEFAULT NULL,
			  `date_changed` datetime DEFAULT NULL,
			  `voided` tinyint(1) NOT NULL DEFAULT '0',
			  `voided_by` int(11) DEFAULT NULL,
			  `retired` tinyint(1) NOT NULL DEFAULT '0',
			  `retired_by` int(11) DEFAULT NULL,
			  `date_voided` datetime DEFAULT NULL,
			  `void_reason` varchar(255) DEFAULT NULL,
			  `uuid` char(38) NOT NULL,
			  PRIMARY KEY (`pharmacyorder_id`),
			  UNIQUE KEY `uuid` (`uuid`),
			  KEY `pharmacyorders_drugorder_fk` (`drugorder_id`),
			  KEY `pharmacyorders_changed_by_fk` (`changed_by`),
			  KEY `pharmacyorders_creator_fk` (`creator`),
			  KEY `pharmacyorders_retired_by_fk` (`retired_by`),
			  KEY `pharmacyorders_voided_by_fk` (`voided_by`),
			  CONSTRAINT `pharmacyorders_drugorder_fk` FOREIGN KEY (`drugorder_id`) REFERENCES `drug_order` (`order_id`),
			  CONSTRAINT `pharmacyorders_changed_by_fk` FOREIGN KEY (`changed_by`) REFERENCES `users` (`user_id`),
			  CONSTRAINT `pharmacyorders_creator_fk` FOREIGN KEY (`creator`) REFERENCES `users` (`user_id`),
			  CONSTRAINT `pharmacyorders_retired_by_fk` FOREIGN KEY (`retired_by`) REFERENCES `users` (`user_id`),
			  CONSTRAINT `pharmacyorders_voided_by_fk` FOREIGN KEY (`voided_by`) REFERENCES `users` (`user_id`)
			);
		</sql>
	</changeSet>
	<!-- 
	<changeSet id="icchange.pharmacy-v1.0.6" author="sLuchianov">
	<preConditions onFail="MARK_RAN">
		<and>
			<tableExists tableName="pharmacy_pharmacyorders"/>
			<tableExists tableName="pharmacy_drugorderstatus"/>
		</and>
	</preConditions>
		<comment>
			1st Trigger This code creates a trigger that will generate DrugOrderStatus on a new drugOrder entry
			2nd Trigger will delete status if drugorder is deleted.
			3rd Trigger Another trigger will update DrugOrderStatus to partially dispensed on any pharmacyOrder creation against that particular order
		</comment>
		<sql>
			alter table pharmacy_drugorderstatus
			change column status status varchar(255) default 'N/A';
			
			DROP trigger if exists drug_order_new_pharmacy_drugorderstatus_update;
            CREATE trigger drug_order_new_pharmacy_drugorderstatus_update 
            BEFORE INSERT on drug_order FOR EACH ROW 
            INSERT INTO pharmacy_drugorderstatus
            values (NEW.order_id, 'NOT DISPENSED', (SELECT orders.uuid FROM orders
            where orders.order_id = NEW.order_id), '');
            
            DROP trigger if exists drug_order_delete_pharmacy_drugorderstatus_update; 
            create trigger drug_order_delete_pharmacy_drugorderstatus_update 
            BEFORE DELETE on drug_order FOR EACH ROW 
            SET NEW.location_id = (SELECT user_property.property_value FROM user_property
            where user_property.user_id = NEW.creator and user_property.property = 'defaultLocation');
            
            DROP trigger if exists pharmacy_pharmacyorders_new_pharmacy_drugorderstatus_update; 
			create trigger pharmacy_pharmacyorders_new_pharmacy_drugorderstatus_update 
            BEFORE INSERT on pharmacy_pharmacyorders FOR EACH ROW 
            UPDATE pharmacy_drugorderstatus
            SET status = 'PARTIALLY DISPENSED' where order_id = new.drugorder_id;
            
			DROP trigger if exists pharmacy_pharmacyorders_new_pharmacy_drugorderstatus_update; 
				create trigger pharmacy_pharmacyorders_new_pharmacy_drugorderstatus_update 
				AFTER INSERT on pharmacy_pharmacyorders FOR EACH ROW 
				UPDATE pharmacy_drugorderstatus
				SET status = (SELECT CASE 
			WHEN SUM(pharmacy_pharmacyorders.quantity) is NULL THEN 'NOT DISPENSED'
			WHEN drug_order.quantity is NULL THEN 'N/A'
			WHEN SUM(pharmacy_pharmacyorders.quantity) > drug_order.quantity THEN 'COMPLETELY DISPENSED'
			WHEN SUM(pharmacy_pharmacyorders.quantity) = drug_order.quantity THEN 'COMPLETELY DISPENSED'
			ELSE 'PARTIALLY DISPENSED' END
		from pharmacy_pharmacyorders, drug_order
		where pharmacy_pharmacyorders.drugorder_id = drug_order.order_id AND order_id = new.drugorder_id) where order_id = new.drugorder_id;

	 	</sql>
	</changeSet>
	 -->
</databaseChangeLog>